{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        },
        {
          "datasource": {
            "type": "grafana-github-datasource",
            "uid": "cdqntenb1ebr4c"
          },
          "enable": false,
          "iconColor": "green",
          "mappings": {
            "text": {
              "source": "field",
              "value": "url"
            },
            "time": {
              "source": "field",
              "value": "created_at"
            },
            "timeEnd": {
              "source": "field",
              "value": "created_at"
            },
            "title": {
              "source": "field",
              "value": "name"
            }
          },
          "name": "Bridger Releases",
          "target": {
            "owner": "austinmesh",
            "queryType": "Releases",
            "refId": "Anno",
            "repository": "bridger"
          }
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 1,
    "links": [
      {
        "asDropdown": false,
        "icon": "external link",
        "includeVars": false,
        "keepTime": false,
        "tags": [
          "austinmesh"
        ],
        "targetBlank": false,
        "title": "Related Dashboards",
        "tooltip": "",
        "type": "dashboards",
        "url": ""
      }
    ],
    "panels": [
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 0
        },
        "id": 4,
        "panels": [],
        "title": "Node Information",
        "type": "row"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic-by-name"
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "none"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 10,
          "w": 4,
          "x": 0,
          "y": 1
        },
        "id": 3,
        "options": {
          "colorMode": "value",
          "graphMode": "area",
          "justifyMode": "auto",
          "orientation": "auto",
          "percentChangeColorMode": "standard",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "",
            "values": false
          },
          "showPercentChange": false,
          "textMode": "auto",
          "wideLayout": true
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "from(bucket: \"meshtastic\")\n  |> range(start: 0) // All time\n  |> filter(fn: (r) => r._measurement == \"node\")\n  |> keep(columns: [\"_from\"])\n  |> group()\n  |> distinct(column: \"_from\")\n  |> count()\n  |> rename(columns: {_value: \"All Time\"})",
            "refId": "A"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop) // All time\n  |> filter(fn: (r) => r._measurement == \"node\")\n  |> keep(columns: [\"_from\"])\n  |> group()\n  |> distinct(column: \"_from\")\n  |> count()\n  |> rename(columns: {_value: \"Selected Range\"})",
            "refId": "B"
          }
        ],
        "title": "Node Count",
        "type": "stat"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic-by-name"
            },
            "custom": {
              "align": "left",
              "cellOptions": {
                "type": "color-text"
              },
              "filterable": true,
              "inspect": false
            },
            "links": [],
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "string"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "hop_start"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 96
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "hop_limit"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 94
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "hw_model"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 101
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "rx_rssi"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 81
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "model"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 211
                },
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "orange",
                    "mode": "fixed"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "short"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 76
                },
                {
                  "id": "links",
                  "value": [
                    {
                      "title": "${__data.fields.short} Dashboard",
                      "url": "https://graphs.austinmesh.org/d/bdu5zhxo2y1vkd/individual-node?orgId=1&var-node=${__data.fields.id}"
                    }
                  ]
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "last_seen"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 170
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "id"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 112
                },
                {
                  "id": "links",
                  "value": [
                    {
                      "title": "${__data.fields.short} Dashboard",
                      "url": "https://graphs.austinmesh.org/d/bdu5zhxo2y1vkd/individual-node?orgId=1&var-node=${__data.fields.id}"
                    }
                  ]
                }
              ]
            },
            {
              "matcher": {
                "id": "byName",
                "options": "long"
              },
              "properties": [
                {
                  "id": "custom.width",
                  "value": 216
                },
                {
                  "id": "links",
                  "value": [
                    {
                      "title": "${__data.fields.short} Dashboard",
                      "url": "https://graphs.austinmesh.org/d/bdu5zhxo2y1vkd/individual-node?orgId=1&var-node=${__data.fields.id}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 10,
          "w": 15,
          "x": 4,
          "y": 1
        },
        "id": 7,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "enablePagination": true,
            "fields": "",
            "reducer": [
              "variance"
            ],
            "show": false
          },
          "frameIndex": 0,
          "showHeader": true,
          "sortBy": [
            {
              "desc": true,
              "displayName": "last_seen"
            }
          ]
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nmodels = from(bucket: \"meshtastic\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"modelinfo\")\n  |> group(columns: [\"displayName\"])\n  |> distinct()\n  |> group()\n\nnodes = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({r with hw_model: int(v: r.hw_model)}))\n  |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"channel_id\", \"gateway_id\", \"to\"])\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> group(columns: [\"_from\"])\n  |> last(column: \"_from\")\n  |> group()\n\njoin.left(\n  left: nodes,\n  right: models,\n  on: (l, r) => l.hw_model == r._value,\n  as: (l, r) => ({l with model: if exists r.displayName then r.displayName  else \"Unknown\"})\n) |> sort(columns: [\"hw_model\"])",
            "refId": "A"
          }
        ],
        "title": "Node Info",
        "transformations": [
          {
            "id": "filterByValue",
            "options": {
              "filters": [
                {
                  "config": {
                    "id": "isNull",
                    "options": {}
                  },
                  "fieldName": "_from"
                }
              ],
              "match": "all",
              "type": "exclude"
            }
          },
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "activelySupported models": true,
                "architecture models": true,
                "hwModelSlug models": true,
                "platformioTarget models": true,
                "rx_time": true
              },
              "includeByName": {},
              "indexByName": {
                "_from": 1,
                "_time": 0,
                "hop_limit": 5,
                "hop_start": 6,
                "hw_model": 7,
                "long_name": 2,
                "model": 4,
                "rx_rssi": 8,
                "rx_snr": 9,
                "rx_time": 10,
                "short_name": 3
              },
              "renameByName": {
                "_from": "id",
                "_time": "last_seen",
                "displayName models": "model",
                "long_name": "long",
                "short_name": "short"
              }
            }
          }
        ],
        "type": "table"
      },
      {
        "datasource": {
          "default": false,
          "type": "datasource",
          "uid": "-- Mixed --"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              }
            },
            "mappings": []
          },
          "overrides": []
        },
        "gridPos": {
          "h": 10,
          "w": 5,
          "x": 19,
          "y": 1
        },
        "id": 12,
        "options": {
          "displayLabels": [
            "percent"
          ],
          "legend": {
            "calcs": [],
            "displayMode": "hidden",
            "placement": "right",
            "showLegend": false,
            "values": []
          },
          "pieType": "pie",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^_value$/",
            "values": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "11.2.0-186788",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nmodels = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> filter(fn: (r) => exists r[\"hw_model\"])\n  |> keep(columns: [\"_from\", \"hw_model\"])\n  |> group(columns: [\"hw_model\"])\n  |> distinct(column: \"_from\")\n  |> count()\n  |> group()\n  |> map(fn: (r) => ({r with \"hw_model\": int(v: r.hw_model)}))\n\nmodelinfo = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"modelinfo\")\n  |> last()\n  |> group()\n\njoin.left(\n  left: models,\n  right: modelinfo,\n  on: (l, r) => l.hw_model == r._value,\n  as: (l, r) => ({l with \"model_name\": if exists r.displayName then r.displayName else \"Unknown: \" + string(v: l.hw_model)})\n)\n  |> keep(columns: [\"model_name\", \"_value\"])",
            "refId": "nodes"
          }
        ],
        "title": "Model Breakdown",
        "type": "piechart"
      },
      {
        "datasource": {
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "fixed"
            },
            "custom": {
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 15,
          "w": 12,
          "x": 0,
          "y": 11
        },
        "id": 10,
        "options": {
          "basemap": {
            "config": {},
            "name": "Layer 0",
            "type": "default"
          },
          "controls": {
            "mouseWheelZoom": true,
            "showAttribution": false,
            "showDebug": false,
            "showMeasure": true,
            "showScale": false,
            "showZoom": true
          },
          "layers": [
            {
              "config": {
                "showLegend": false,
                "style": {
                  "color": {
                    "fixed": "semi-dark-green"
                  },
                  "opacity": 0,
                  "rotation": {
                    "fixed": 0,
                    "max": 360,
                    "min": -360,
                    "mode": "mod"
                  },
                  "size": {
                    "fixed": 18,
                    "max": 15,
                    "min": 2
                  },
                  "symbol": {
                    "fixed": "img/icons/marker/circle.svg",
                    "mode": "fixed"
                  },
                  "symbolAlign": {
                    "horizontal": "center",
                    "vertical": "center"
                  },
                  "text": {
                    "field": "short_name",
                    "fixed": "",
                    "mode": "field"
                  },
                  "textConfig": {
                    "fontSize": 12,
                    "offsetX": 0,
                    "offsetY": 0,
                    "textAlign": "center",
                    "textBaseline": "middle"
                  }
                }
              },
              "location": {
                "mode": "auto"
              },
              "name": "Nodes",
              "tooltip": true,
              "type": "markers"
            }
          ],
          "tooltip": {
            "mode": "details"
          },
          "view": {
            "allLayers": true,
            "id": "coords",
            "lat": 30.304495,
            "lon": -97.762864,
            "padding": 10,
            "shared": false,
            "zoom": 9.78
          }
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "// Query for position data\npositionData = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"position\")\n  |> filter(fn: (r) => r[\"_field\"] == \"latitude_i\" or r[\"_field\"] == \"longitude_i\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> map(fn: (r) => ({\n      r with \n      latitude: float(v: r.latitude_i) / 10000000.0, \n      longitude: float(v: r.longitude_i) / 10000000.0,\n      _from: string(v: r._from) // Ensure _from is treated as a string\n  }))\n  |> group(columns: [\"_from\"]) // Group by _from to get the latest position for each node\n  |> sort(columns: [\"_time\"], desc: true) // Sort the data by time in descending order\n  |> top(n: 1, columns: [\"_time\"]) // Get the top entry for each group\n  |> drop(columns: [\"_start\", \"_stop\", \"_measurement\", \"latitude_i\", \"longitude_i\"])\n\n// Query for node data\nnodeData = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> keep(columns: [\"_from\", \"short_name\"])\n  |> map(fn: (r) => ({\n      r with\n      _from: string(v: r._from) // Ensure _from is treated as a string\n  }))\n  |> group(columns: [\"_from\"]) // Group by _from to match the position data\n  |> sort(columns: [\"_time\"], desc: true) // Sort the data by time in descending order\n  |> top(n: 1, columns: [\"_time\"]) // Get the top entry for each group\n\n// Join position and node data on _from field\njoinedData = join(\n  tables: {pos: positionData, node: nodeData},\n  on: [\"_from\"]\n)\n  |> map(fn: (r) => ({\n      r with\n      short_name: r[\"short_name\"],\n      latitude: r[\"latitude\"],\n      longitude: r[\"longitude\"]\n  }))\n  |> drop(columns: [\"_time\", \"_value\", \"latitude_i\", \"longitude_i\"])\n\n// Final result for the map\njoinedData\n  |> keep(columns: [\"latitude\", \"longitude\", \"short_name\"])\n",
            "refId": "A"
          }
        ],
        "title": "Latest Node Locations",
        "type": "geomap"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 15,
          "w": 12,
          "x": 12,
          "y": 11
        },
        "id": 11,
        "interval": "60m",
        "options": {
          "basemap": {
            "config": {},
            "name": "Layer 0",
            "type": "default"
          },
          "controls": {
            "mouseWheelZoom": true,
            "showAttribution": true,
            "showDebug": false,
            "showMeasure": true,
            "showScale": false,
            "showZoom": true
          },
          "layers": [
            {
              "config": {
                "blur": 25,
                "radius": 5,
                "weight": {
                  "fixed": 0.5,
                  "max": 1,
                  "min": 0
                }
              },
              "filterData": {
                "id": "byRefId",
                "options": "A"
              },
              "location": {
                "mode": "auto"
              },
              "name": "Nodes",
              "opacity": 0.9,
              "tooltip": true,
              "type": "heatmap"
            }
          ],
          "tooltip": {
            "mode": "details"
          },
          "view": {
            "allLayers": true,
            "id": "coords",
            "lastOnly": false,
            "lat": 30.304495,
            "layer": "Nodes",
            "lon": -97.762864,
            "padding": 10,
            "zoom": 9.78
          }
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"experimental/geo\"\nimport \"join\"\n\n// Query for position data\npositionData = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"position\")\n  |> filter(fn: (r) => r[\"_field\"] == \"latitude_i\" or r[\"_field\"] == \"longitude_i\")\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 10000000.0}))\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> geo.shapeData(latField: \"latitude_i\", lonField: \"longitude_i\", level: 13)\n  |> group()\n\n\ncellCounts = positionData\n  |> group(columns: [\"s2_cell_id\", \"_measurement\"])\n  |> duplicate(column: \"s2_cell_id\", as: \"cell_count\")\n  |> count(column: \"cell_count\")\n  |> map(fn: (r) => ({r with cell_count: float(v: r.cell_count)}))\n  |> group()\n\n\nmin = cellCounts\n  |> min(column: \"cell_count\")\n  |> findRecord(fn: (key) => true, idx: 0)\n\nmax = cellCounts\n  |> max(column: \"cell_count\")\n  |> findRecord(fn: (key) => true, idx: 0)\n\ncellWeight = cellCounts\n  |> map(fn: (r) => ({\n    r with weight: float(v: (r.cell_count - min.cell_count) / (max.cell_count - min.cell_count))\n  }))\n\njoined = join.left(\n  left: positionData,\n  right: cellWeight,\n  on: (l, r) => (l.s2_cell_id == r.s2_cell_id),\n  as: (l , r) => ({l with weight: r.weight})\n)\n\njoined",
            "refId": "A"
          }
        ],
        "title": "Network Activity",
        "type": "geomap"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 26
        },
        "id": 5,
        "panels": [],
        "title": "Telemetry",
        "type": "row"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMin": 0,
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": 21600000,
              "lineInterpolation": "smooth",
              "lineStyle": {
                "fill": "solid"
              },
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": 21600000,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "dashed"
              }
            },
            "displayName": "${__field.labels.short_name}",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "#EAB839",
                  "value": 5
                },
                {
                  "color": "#6ED0E0",
                  "value": 10
                },
                {
                  "color": "#EF843C",
                  "value": 20
                }
              ]
            },
            "unit": "percent"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 27
        },
        "id": 15,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nair = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_field\"] == \"air_util_tx\")\n  |> filter(fn: (r) => r[\"_value\"] < 200 and r[\"_value\"] >= 0)\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> group(columns: [\"_from\"])\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n  \n\nnodes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\n\njoined = join.left(\n    left: air,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name})\n  )\n\njoined\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
            "refId": "A"
          }
        ],
        "title": "Air Utilization TX",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMin": 0,
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "hue",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": 21600000,
              "lineInterpolation": "smooth",
              "lineStyle": {
                "fill": "solid"
              },
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": 21600000,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "dashed"
              }
            },
            "displayName": "${__field.labels.short_name}",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                }
              ]
            },
            "unit": "percent"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "A"
              },
              "properties": [
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      0,
                      10
                    ],
                    "fill": "dot"
                  }
                }
              ]
            },
            {
              "matcher": {
                "id": "byFrameRefID",
                "options": "B"
              },
              "properties": [
                {
                  "id": "custom.lineWidth",
                  "value": 3
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 27
        },
        "id": 13,
        "interval": "5m",
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "import \"join\"\n\nchannel = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_field\"] == \"channel_utilization\")\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> group(columns: [\"_from\"])\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\nnodes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\njoined = join.left(\n    left: channel,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name})\n  )\n\njoined\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n",
            "refId": "A"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "import \"join\"\n\nchannel = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_field\"] == \"channel_utilization\")\n  |> group(columns: [\"_from\"])\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\nnodes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\njoined = join.left(\n    left: channel,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name})\n  )\n\nmoving_average_series = joined\n  |> group()  // Remove all grouping to calculate a global moving average\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> movingAverage(n: 5)\n  |> map(fn: (r) => ({r with _field: \"Moving Average\", short_name: \"Overall Average\"}))  // Set a custom short_name\n\nmoving_average_series\n",
            "refId": "B"
          }
        ],
        "title": "Channel Utilization",
        "type": "timeseries"
      },
      {
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 35
        },
        "id": 19,
        "libraryPanel": {
          "name": "Temperature",
          "uid": "advfxaterb1moa"
        },
        "title": "Temperature"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "displayName": "${__field.labels.short_name}",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "humidity"
          },
          "overrides": [
            {
              "matcher": {
                "id": "byName",
                "options": "weather.openweathermap humidity {domain=\"weather\", entity_id=\"openweathermap\"}"
              },
              "properties": [
                {
                  "id": "color",
                  "value": {
                    "fixedColor": "dark-orange",
                    "mode": "fixed"
                  }
                },
                {
                  "id": "custom.lineStyle",
                  "value": {
                    "dash": [
                      10,
                      10
                    ],
                    "fill": "dash"
                  }
                }
              ]
            }
          ]
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 35
        },
        "id": 16,
        "options": {
          "legend": {
            "calcs": [
              "last"
            ],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "import \"join\"\n\nhumidity = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"sensor\")\n  |> filter(fn: (r) => r[\"_field\"] == \"relative_humidity\")\n  |> filter(fn: (r) => (r[\"_value\"] >= 0) and (r[\"_value\"] <= 100))\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n  \n\nnodes = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\n\njoined = join.left(\n    left: humidity,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name})\n  )\n\njoined\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> movingAverage(n: 5)",
            "refId": "humidity"
          },
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "from(bucket: \"weather\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"weather.openweathermap\")\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
            "refId": "outside_humidity"
          }
        ],
        "title": "Humidity",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "series",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "hue",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": 43200000,
              "lineInterpolation": "smooth",
              "lineStyle": {
                "fill": "solid"
              },
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": 7200000,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "dashed"
              }
            },
            "decimals": 2,
            "displayName": "${__field.labels.display_name}",
            "fieldMinMax": false,
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "red"
                },
                {
                  "color": "green",
                  "value": 4.2
                }
              ]
            },
            "unit": "volt"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 43
        },
        "id": 6,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "right",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "10.4.4",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nvolts = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"battery\")\n  |> filter(fn: (r) => r[\"_field\"] == \"voltage\")\n  |> group(columns: [\"_measurement\", \"_field\", \"_from\"])\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n  \nnodes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\n  joined = join.left(\n    left: volts,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name, display_name: if exists r.short_name then r.short_name else l.id})\n  )\n\njoined\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\", \"display_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> movingAverage(n: 5)",
            "refId": "A"
          }
        ],
        "title": "Battery Voltages",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "purple",
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "displayName": "${__field.labels.short_name}",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            },
            "unit": "percent"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 43
        },
        "id": 20,
        "options": {
          "legend": {
            "calcs": [
              "last",
              "mean",
              "min",
              "max",
              "p95"
            ],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nbattery = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"battery\")\n  |> filter(fn: (r) => r[\"_field\"] == \"battery_level\")\n  |> filter(fn: (r) => r[\"_value\"] != 0)\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> group(columns: [\"_from\", \"_field\"])\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\nnodes = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\njoined = join.left(\n    left: battery,\n    right: nodes,\n    on: (l, r) => l.id == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name})\n  )\n\njoined\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> movingAverage(n: 4)",
            "refId": "A"
          }
        ],
        "title": "Battery Level",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "continuous-BlPu"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "smooth",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": true,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "displayName": "${__field.labels.display_name}",
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                }
              ]
            },
            "unit": "s"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 51
        },
        "id": 21,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": false
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\n\nuptime = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"battery\")\n  |> filter(fn: (r) => r[\"_field\"] == \"uptime_seconds\")\n  |> filter(fn: (r) => r[\"_value\"] > 0 and r[\"_value\"] < 31536000)\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> group()\n\nnodes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> drop(columns: [\"_field\", \"_value\", \"_start\", \"_stop\", \"to\", \"channel_id\"])\n  |> group(columns: [\"_from\", \"short_name\", \"long_name\"])\n  |> last(column: \"_from\")\n  |> rename(columns: {_from: \"id\"})\n  |> group()\n\njoin.left(\n    left: uptime,\n    right: nodes,\n    on: (l, r) => l._from == r.id,\n    as: (l, r) => ({l with short_name: r.short_name, long_name: r.long_name, display_name: if exists r.short_name then r.short_name else l._from})\n  )\n  |> group(columns: [\"_measurement\", \"_field\", \"id\", \"short_name\", \"long_name\", \"display_name\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)",
            "refId": "A"
          }
        ],
        "title": "Uptime",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "description": "",
        "fieldConfig": {
          "defaults": {
            "color": {
              "fixedColor": "green",
              "mode": "palette-classic"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "color-text",
                "wrapText": false
              },
              "filterable": false,
              "inspect": false
            },
            "mappings": [
              {
                "options": {
                  "CLIENT": {
                    "color": "green",
                    "index": 0,
                    "text": "Client"
                  },
                  "CLIENT_MUTE": {
                    "color": "blue",
                    "index": 2,
                    "text": "Client Mute"
                  },
                  "ROUTER": {
                    "color": "red",
                    "index": 1,
                    "text": "Router"
                  },
                  "ROUTER_CLIENT": {
                    "color": "light-orange",
                    "index": 3,
                    "text": "Router Client"
                  }
                },
                "type": "value"
              }
            ],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "purple"
                }
              ]
            },
            "unit": "string"
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 12,
          "y": 51
        },
        "id": 22,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": true,
            "fields": "",
            "reducer": [],
            "show": false
          },
          "frameIndex": 0,
          "showHeader": true
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"dict\"\n\nroleNameDict = [\n    0: \"CLIENT\",\n    1: \"CLIENT_MUTE\",\n    2: \"ROUTER\",\n    3: \"ROUTER_CLIENT\",\n    4: \"REPEATER\",\n    5: \"TRACKER\",\n    6: \"SENSOR\",\n    7: \"TAK\",\n    8: \"CLIENT_HIDDEN\",\n    9: \"LOST_AND_FOUND\",\n    10: \"TAK_TRACKER\"\n]\n\nnodes = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> filter(fn: (r) => r[\"_field\"] == \"packet_id\")\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n\nnodesOther = nodes\n  |> filter(fn: (r) => exists r[\"role\"])\n\nnodesClient = nodes\n  |> filter(fn: (r) => not exists r[\"role\"])\n  |> set(key: \"role\", value: \"0\")\n\nunion(tables: [nodesOther, nodesClient])\n  |> map(fn: (r) => ({r with role_name: dict.get(dict: roleNameDict, key: int(v: r.role), default: \"UNKNOWN\")}))\n  |> group()\n  |> unique(column: \"_from\")\n  |> keep(columns: [\"short_name\", \"role\", \"role_name\"])\n",
            "refId": "A"
          }
        ],
        "title": "Roles",
        "transformations": [
          {
            "id": "groupToNestedTable",
            "options": {
              "fields": {
                "Count": {
                  "aggregations": [
                    "count"
                  ],
                  "operation": "aggregate"
                },
                "Name": {
                  "aggregations": [
                    "count"
                  ]
                },
                "Role": {
                  "aggregations": [],
                  "operation": "groupby"
                },
                "role": {
                  "aggregations": [
                    "count"
                  ],
                  "operation": "aggregate"
                },
                "role_name": {
                  "aggregations": [],
                  "operation": "groupby"
                }
              },
              "showSubframeHeaders": false
            }
          },
          {
            "id": "organize",
            "options": {
              "excludeByName": {
                "_field": true,
                "_from": true,
                "_measurement": true,
                "_start": true,
                "_stop": true,
                "_time": true,
                "_value": true,
                "channel_id": true,
                "gateway_id": true,
                "hw_model": true,
                "long_name": true,
                "role": false,
                "to": true
              },
              "includeByName": {},
              "indexByName": {},
              "renameByName": {
                "Nested frames": "Short",
                "role": "Count",
                "role (count)": "Count",
                "role_name": "Role",
                "short_name": "Name"
              }
            }
          }
        ],
        "type": "table"
      },
      {
        "collapsed": false,
        "gridPos": {
          "h": 1,
          "w": 24,
          "x": 0,
          "y": 59
        },
        "id": 8,
        "panels": [],
        "title": "MQTT Information",
        "type": "row"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              }
            },
            "displayName": "${__field.labels.name}",
            "links": [
              {
                "title": "${__data.fields.name} Info",
                "url": "https://graphs.austinmesh.org/d/cds5zcikts740a/gateway-data?orgId=1&var-gateway=${__data.fields.hex_id}&var-nodes=All"
              }
            ],
            "mappings": []
          },
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 8,
          "x": 0,
          "y": 60
        },
        "id": 9,
        "options": {
          "displayLabels": [
            "percent"
          ],
          "legend": {
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true,
            "values": [
              "percent"
            ]
          },
          "pieType": "pie",
          "reduceOptions": {
            "calcs": [
              "lastNotNull"
            ],
            "fields": "/^packets$/",
            "values": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "pluginVersion": "10.4.4",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "query": "import \"join\"\nimport \"strings\"\nimport \"contrib/bonitoo-io/hex\"\n\nhexify = (str) => {\n  hexString = hex.string(v: int(v: str))\n  return if strings.strlen(v: hexString) == 7 then \"0\" + hexString else hexString\n}\n\ngatewayIds = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> group(columns: [\"gateway_id\"])\n  |> count()\n  |> group()\n\nnodeIds = from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> keep(columns: [\"_time\", \"_from\", \"short_name\", \"long_name\"])\n  |> group()\n  |> sort(columns: [\"_time\"], desc: true)\n  |> unique(column: \"_from\")\n  |> drop(columns: [\"_time\"])\n  |> map(fn: (r) => ({r with hex_id: \"!\" + hexify(str: r[\"_from\"])}))\n\njoinedData = join.left(\n  left: gatewayIds,\n  right: nodeIds,\n  on: (l, r) => l.gateway_id == r.hex_id,\n  as: (l, r) => ({r with hex_id: l.gateway_id, packets: l._value})\n)\n\njoinedData\n  |> map(fn: (r) => ({\n    r with\n    name: if exists r.short_name then r.short_name else r.hex_id\n  }))\n  |> filter(fn: (r) => r[\"name\"] !=  \"\")\n  |> keep(columns: [\"name\", \"packets\"])",
            "refId": "A"
          }
        ],
        "title": "Contributing Gateways",
        "type": "piechart"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adpwvhf6t1wjkd"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "axisSoftMin": 0,
              "fillOpacity": 85,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "lineWidth": 0,
              "scaleDistribution": {
                "type": "linear"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "displayName": "${__series.name}",
            "fieldMinMax": false,
            "mappings": [],
            "min": 0,
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 12,
          "w": 16,
          "x": 8,
          "y": 60
        },
        "id": 17,
        "maxDataPoints": 200,
        "options": {
          "barRadius": 0,
          "barWidth": 0.9,
          "fullHighlight": false,
          "groupWidth": 0.7,
          "legend": {
            "calcs": [
              "min",
              "max",
              "mean",
              "sum"
            ],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "orientation": "auto",
          "showValue": "always",
          "stacking": "normal",
          "tooltip": {
            "mode": "single",
            "sort": "none"
          },
          "xField": "_time",
          "xTickLabelRotation": 0,
          "xTickLabelSpacing": 100
        },
        "pluginVersion": "11.2.0-186788",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adpwvhf6t1wjkd"
            },
            "hide": false,
            "query": "from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] != \"modelinfo\")\n  |> filter(fn: (r) => if length(arr: [${nodes:doublequote}]) == 0 then true else contains(value: r._from, set: [${nodes:doublequote}]))\n  |> drop(columns: [\"_value\"])\n  |> group(columns: [\"_measurement\"])\n  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false, column: \"_from\")",
            "refId": "A"
          }
        ],
        "title": "Packets",
        "type": "barchart"
      }
    ],
    "refresh": "30m",
    "schemaVersion": 39,
    "tags": [
      "austinmesh",
      "global"
    ],
    "templating": {
      "list": [
        {
          "allValue": " ",
          "current": {
            "selected": true,
            "text": [
              "All"
            ],
            "value": [
              "$__all"
            ]
          },
          "datasource": {
            "type": "influxdb",
            "uid": "adpwvhf6t1wjkd"
          },
          "definition": "from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> keep(columns: [\"_time\", \"_from\", \"long_name\", \"short_name\"])\n  |> map(fn: (r) => ({ r with __value: string(v: r._from) + \":\" + string(v: r.long_name) + \" (\" + string(v: r.short_name) + \" / \" + string(v: r._from) + \")\" }))\n  |> group(columns: [\"__value\"])\n  |> last(column: \"_time\")\n  |> group()",
          "description": "Node or list of nodes to filter queries by.",
          "hide": 1,
          "includeAll": true,
          "label": "Nodes",
          "multi": true,
          "name": "nodes",
          "options": [],
          "query": {
            "0": "f",
            "1": "r",
            "2": "o",
            "3": "m",
            "4": "(",
            "5": "b",
            "6": "u",
            "7": "c",
            "8": "k",
            "9": "e",
            "10": "t",
            "11": ":",
            "12": " ",
            "13": "\"",
            "14": "m",
            "15": "e",
            "16": "s",
            "17": "h",
            "18": "t",
            "19": "a",
            "20": "s",
            "21": "t",
            "22": "i",
            "23": "c",
            "24": "\"",
            "25": ")",
            "26": "\n",
            "27": " ",
            "28": " ",
            "29": "|",
            "30": ">",
            "31": " ",
            "32": "r",
            "33": "a",
            "34": "n",
            "35": "g",
            "36": "e",
            "37": "(",
            "38": "s",
            "39": "t",
            "40": "a",
            "41": "r",
            "42": "t",
            "43": ":",
            "44": " ",
            "45": "v",
            "46": ".",
            "47": "t",
            "48": "i",
            "49": "m",
            "50": "e",
            "51": "R",
            "52": "a",
            "53": "n",
            "54": "g",
            "55": "e",
            "56": "S",
            "57": "t",
            "58": "a",
            "59": "r",
            "60": "t",
            "61": ",",
            "62": " ",
            "63": "s",
            "64": "t",
            "65": "o",
            "66": "p",
            "67": ":",
            "68": " ",
            "69": "v",
            "70": ".",
            "71": "t",
            "72": "i",
            "73": "m",
            "74": "e",
            "75": "R",
            "76": "a",
            "77": "n",
            "78": "g",
            "79": "e",
            "80": "S",
            "81": "t",
            "82": "o",
            "83": "p",
            "84": ")",
            "85": "\n",
            "86": " ",
            "87": " ",
            "88": "|",
            "89": ">",
            "90": " ",
            "91": "f",
            "92": "i",
            "93": "l",
            "94": "t",
            "95": "e",
            "96": "r",
            "97": "(",
            "98": "f",
            "99": "n",
            "100": ":",
            "101": " ",
            "102": "(",
            "103": "r",
            "104": ")",
            "105": " ",
            "106": "=",
            "107": ">",
            "108": " ",
            "109": "r",
            "110": "[",
            "111": "\"",
            "112": "_",
            "113": "m",
            "114": "e",
            "115": "a",
            "116": "s",
            "117": "u",
            "118": "r",
            "119": "e",
            "120": "m",
            "121": "e",
            "122": "n",
            "123": "t",
            "124": "\"",
            "125": "]",
            "126": " ",
            "127": "=",
            "128": "=",
            "129": " ",
            "130": "\"",
            "131": "n",
            "132": "o",
            "133": "d",
            "134": "e",
            "135": "\"",
            "136": ")",
            "137": "\n",
            "138": " ",
            "139": " ",
            "140": "|",
            "141": ">",
            "142": " ",
            "143": "k",
            "144": "e",
            "145": "e",
            "146": "p",
            "147": "(",
            "148": "c",
            "149": "o",
            "150": "l",
            "151": "u",
            "152": "m",
            "153": "n",
            "154": "s",
            "155": ":",
            "156": " ",
            "157": "[",
            "158": "\"",
            "159": "_",
            "160": "t",
            "161": "i",
            "162": "m",
            "163": "e",
            "164": "\"",
            "165": ",",
            "166": " ",
            "167": "\"",
            "168": "_",
            "169": "f",
            "170": "r",
            "171": "o",
            "172": "m",
            "173": "\"",
            "174": ",",
            "175": " ",
            "176": "\"",
            "177": "l",
            "178": "o",
            "179": "n",
            "180": "g",
            "181": "_",
            "182": "n",
            "183": "a",
            "184": "m",
            "185": "e",
            "186": "\"",
            "187": ",",
            "188": " ",
            "189": "\"",
            "190": "s",
            "191": "h",
            "192": "o",
            "193": "r",
            "194": "t",
            "195": "_",
            "196": "n",
            "197": "a",
            "198": "m",
            "199": "e",
            "200": "\"",
            "201": "]",
            "202": ")",
            "203": "\n",
            "204": " ",
            "205": " ",
            "206": "|",
            "207": ">",
            "208": " ",
            "209": "m",
            "210": "a",
            "211": "p",
            "212": "(",
            "213": "f",
            "214": "n",
            "215": ":",
            "216": " ",
            "217": "(",
            "218": "r",
            "219": ")",
            "220": " ",
            "221": "=",
            "222": ">",
            "223": " ",
            "224": "(",
            "225": "{",
            "226": " ",
            "227": "r",
            "228": " ",
            "229": "w",
            "230": "i",
            "231": "t",
            "232": "h",
            "233": " ",
            "234": "_",
            "235": "_",
            "236": "v",
            "237": "a",
            "238": "l",
            "239": "u",
            "240": "e",
            "241": ":",
            "242": " ",
            "243": "s",
            "244": "t",
            "245": "r",
            "246": "i",
            "247": "n",
            "248": "g",
            "249": "(",
            "250": "v",
            "251": ":",
            "252": " ",
            "253": "r",
            "254": ".",
            "255": "_",
            "256": "f",
            "257": "r",
            "258": "o",
            "259": "m",
            "260": ")",
            "261": " ",
            "262": "+",
            "263": " ",
            "264": "\"",
            "265": ":",
            "266": "\"",
            "267": " ",
            "268": "+",
            "269": " ",
            "270": "s",
            "271": "t",
            "272": "r",
            "273": "i",
            "274": "n",
            "275": "g",
            "276": "(",
            "277": "v",
            "278": ":",
            "279": " ",
            "280": "r",
            "281": ".",
            "282": "l",
            "283": "o",
            "284": "n",
            "285": "g",
            "286": "_",
            "287": "n",
            "288": "a",
            "289": "m",
            "290": "e",
            "291": ")",
            "292": " ",
            "293": "+",
            "294": " ",
            "295": "\"",
            "296": " ",
            "297": "(",
            "298": "\"",
            "299": " ",
            "300": "+",
            "301": " ",
            "302": "s",
            "303": "t",
            "304": "r",
            "305": "i",
            "306": "n",
            "307": "g",
            "308": "(",
            "309": "v",
            "310": ":",
            "311": " ",
            "312": "r",
            "313": ".",
            "314": "s",
            "315": "h",
            "316": "o",
            "317": "r",
            "318": "t",
            "319": "_",
            "320": "n",
            "321": "a",
            "322": "m",
            "323": "e",
            "324": ")",
            "325": " ",
            "326": "+",
            "327": " ",
            "328": "\"",
            "329": ")",
            "330": "\"",
            "331": " ",
            "332": "}",
            "333": ")",
            "334": ")",
            "335": "\n",
            "336": " ",
            "337": " ",
            "338": "|",
            "339": ">",
            "340": " ",
            "341": "g",
            "342": "r",
            "343": "o",
            "344": "u",
            "345": "p",
            "346": "(",
            "347": "c",
            "348": "o",
            "349": "l",
            "350": "u",
            "351": "m",
            "352": "n",
            "353": "s",
            "354": ":",
            "355": " ",
            "356": "[",
            "357": "\"",
            "358": "_",
            "359": "_",
            "360": "v",
            "361": "a",
            "362": "l",
            "363": "u",
            "364": "e",
            "365": "\"",
            "366": "]",
            "367": ")",
            "368": "\n",
            "369": " ",
            "370": " ",
            "371": "|",
            "372": ">",
            "373": " ",
            "374": "l",
            "375": "a",
            "376": "s",
            "377": "t",
            "378": "(",
            "379": "c",
            "380": "o",
            "381": "l",
            "382": "u",
            "383": "m",
            "384": "n",
            "385": ":",
            "386": " ",
            "387": "\"",
            "388": "_",
            "389": "t",
            "390": "i",
            "391": "m",
            "392": "e",
            "393": "\"",
            "394": ")",
            "395": "\n",
            "396": " ",
            "397": " ",
            "398": "|",
            "399": ">",
            "400": " ",
            "401": "g",
            "402": "r",
            "403": "o",
            "404": "u",
            "405": "p",
            "406": "(",
            "407": ")",
            "query": "from(bucket: \"meshtastic\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"node\")\n  |> keep(columns: [\"_time\", \"_from\", \"long_name\", \"short_name\"])\n  |> map(fn: (r) => ({ r with __value: string(v: r._from) + \":\" + string(v: r.long_name) + \" (\" + string(v: r.short_name) + \" / \" + string(v: r._from) + \")\" }))\n  |> group(columns: [\"__value\"])\n  |> last(column: \"_time\")\n  |> group()"
          },
          "refresh": 2,
          "regex": "/(?<value>[0-9]+)\\:(?<text>.*)/",
          "skipUrlSync": false,
          "sort": 7,
          "type": "query"
        }
      ]
    },
    "time": {
      "from": "now-7d",
      "to": "now"
    },
    "timepicker": {
      "refresh_intervals": [
        "30s",
        "1m",
        "5m",
        "15m",
        "30m",
        "1h",
        "2h",
        "1d"
      ]
    },
    "timezone": "browser",
    "title": "Austin Mesh",
    "uid": "ddpwwgtdxf2m8f",
    "version": 79,
    "weekStart": ""
  }
